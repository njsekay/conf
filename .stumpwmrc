;; -*- Mode: Lisp; Mode: StumpWM; -*-
;;.stumpwmrc --- my own Stumpwm customizations
;;Copyright (C) 2006 by gwern
;;Author: gwern <gwern0@gmail.com>
;;License: public domain
;;Where: <http:en.wikipedia.org/wiki/User:Gwern/.stumpwmrc>
;;When:  Time-stamp: "2007-01-28 22:04:22 gwern"
;;Keywords: local,customization,Stumpwm
;;Commentary: Modifies visual appearance of mode-line, input box, X windows; adds numerous key bindings
;;and heavily integrates Surfraw shortcuts. Includes some helper/utility functions.
;; Install `xloadimage' (for getting the `xsetbg' command)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;Global variables;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;Declare our default programs for certain things, and how visually things will look,
;;;for the mode line, the input box, etc.

;;Declare what this file is for.
(in-package :stumpwm)

;; set contrib directory
(set-contrib-dir "/home/njsekay/.stumpwm.d/contrib")

;; load a few modules
(mapcar #'load-module '("cpu"
                        "mem"
                        ;; "net"
                        ;; "disk"
                        "amixer"
                        "aumix"
                        ;; "mpd"
                        "menu"
                        "mode-line-setting"))

(setq *shell-program* (stumpwm::getenv "SHELL"))
(defvar *regular-map* "aoeuid")
(defvar *shifted-map* "AOEUID")
(defvar *alphabet*    "abcdefghijklmnopqrstuvwxyz")
(defvar *clipboard*   (make-hash-table :test 'equalp))

(message "Happy Hacking!")
(setq *startup-message* nil)
(setq *startup-mode-line* t)

;;; Variables
;; suppress the message StumpWM displays when it starts. Set it to NIL
(setf *startup-message* nil)
(setf *startup-message* "Never Stop Hacking! And Happy Hacking!")

;;Set the font for the input box. I have a nifty Lisp machine font.
;; (set-font "-kochi-gothic-medium-r-normal-*-*-110-*-*-p-*-iso10646-1")
;; (run-shell-command "xset fp+ /usr/share/fonts/mplus-unicode/")

;; (set-font "-*-courier-medium-r-normal--24-*-*-*-*-*-*-*")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Window Appearance
;; The width in pixels given to the borders of regular windows.
(setf *normal-border-width* 1)
;; The width in pixels given to the borders of windows with maxsize or ratio hints.
(setf *maxsize-border-width* 1)
;; The width in pixels given to the borders of transient or pop-up windows.
(setf *transient-border-width* 1)
(setf *window-border-style* :thick)
(setf *window-number-map* "aoeuidhtns")
(setf *window-format* "^B%m%n^b %40t  ")
;;Window border colors
(set-focus-color "DarkRed")
(set-unfocus-color "black")
(set-win-bg-color     "black")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Input box colors
;;Colors for the input box; these should fairly self-explanatory. 'set-fg-color' will change the color
;;of the font in the echo area, for example, and the background will be green,
;;and the rectangle's lines will be a thin yellow, of course.
(set-fg-color "lightgray")
(set-bg-color "black")
(set-border-color "grey16")
(set-msg-border-width 0)
(setf *input-window-gravity* :center)

;; input windowを中央に出す。
;; (set-normal-gravity   :center)

;;Set the message and input box to the bottom right. This way it overlaps with mode-line.
(setf *message-window-gravity* :center)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Frames
(set-frame-outline-width 1)
;; make frames 1-indexed
;; See http://lists.gnu.org/archive/html/stumpwm-devel/2006-08/msg00002.html
(setf *frame-number-map* "1234567890")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The Other Options
(setf
 *group-number-map*                "aoeuidhtns"
 *run-or-raise-all-groups*         T
 *input-history-ignore-duplicates* T
 *time-format-string-default*      "%a %m/%d/%Y %I:%M%p"
 *time-modeline-string*            "%a %m/%d/%Y %I:%M%p"
 *group-format*                    "%n%s%t"
 *mouse-focus-policy*              :click ;; input focus is transferred to the window you click on
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;Functions, aliases, macros;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;Useful things. Usually defining new Stumpwm commands.

;; TODO add hook so I get notified when people say my name on IRC or IM me
(defun echo-urgent-window (target)
  (message-no-timeout "~a has an message for you." (window-title target)))
(add-hook *urgent-window-hook* 'echo-urgent-window)

;; Hooks
(setf *command-mode-start-hook*
      (list (lambda () (grab-pointer (current-screen)))))

(setf *command-mode-end-hook*
      (list (lambda () (ungrab-pointer))))

(setf *urgent-window-hook*
      (list (lambda (target)
              (run-shell-command
               (format nil "notify-send 'Alert' '«~a ~a» on ~a'"
                       (window-number target)
                       (window-title target)
                       (group-name (window-group target)))))))

;; TODO is there any useful thing to have on 2/3?
;; TODO be really nice to have click on window name to focus it
;; (setf *mode-line-click-hook*
;;       (list #'(lambda (mode-line button x y)
;;                 (declare (ignore mode-line x y))
;;                 (cond ((eq button 5) (run-shell-command "aumix -v -1"))
;;                       ((eq button 4) (run-shell-command "aumix -v +1"))
;;                       ((eq button 1) (run-shell-command "/home/batman/bin/dzen/dzen-cal.sh"))))))

;; Keyboard on topmap to show the key pressed
(defun key-press-hook (key key-seq cmd)
  (declare (ignore key))
  (unless (stringp cmd)
    (message "~A" (print-key-seq (reverse key-seq)))))

(defmacro replace-hook (hook fn)
  `(remove-hook ,hook ,fn)
  `(add-hook ,hook ,fn))
(replace-hook *key-press-hook* 'key-press-hook)


;; --- process management ----------------------------------------
(defun ps-exists (ps)
  (let ((f "ps -ef | grep ~S | grep -v -e grep -e stumpish | wc -l"))
    (< 0 (parse-integer (run-shell-command (format nil f ps) t)))))

(defun start-uniq-command-ps (command &key options (background t))
  (unless (ps-exists command)
    (run-shell-command
     (concat command " " options " " (when background "&")))))

(defun kill-ps-command (command)
  (format nil "kill -TERM `ps -ef | grep ~S | grep -v grep | awk '{print $2}'`"
          command))

(defun kill-ps (command)
  (run-shell-command (kill-ps-command command)))

;; --- stumpwm command definitions -------------------------------
(defmacro def-run-or-raise-command (cmd prop)
  (let ((cmd-str (string-downcase (symbol-name cmd))))
    `(defcommand ,cmd () ()
       (run-or-raise ,cmd-str ,prop))))

;; (def-run-or-raise-command urxvt '(:class "URxvt"))

(defcommand urxvt () ()
  "run urxvt"
  (run-or-raise "urxvt -e tmux attach" '(:class "URxvt")))

(def-run-or-raise-command chromium '(:class "chromium"))
(def-run-or-raise-command ncmpcpp '(:class "Ncmpcpp"))

(defcommand ps-kill (ps) ((:rest "Process to kill: "))
  (kill-ps ps))

(defcommand emacs () ()
  (run-or-raise "emacs" '(:class "emacs")))

(defcommand nm-applet () ()
  (start-uniq-command-ps "nm-applet" :options "--sm-disable"))

;; (defcommand show-battery () ()
;;   (echo-string (current-screen) (run-shell-command "acpi" t)))

(defcommand uptime () ()
  (echo-string (current-screen) (run-shell-command "uptime" t)))

(defcommand gnome-panel () ()
  (if (ps-exists "gnome-panel")
      (progn (kill-ps "gnome-panel")
             (sleep 0.3)
             (when *startup-mode-line*
               (run-shell-command "stumpish mode-line")))
    (progn (when (head-mode-line (current-head))
             (mode-line))
           (run-shell-command "gnome-panel"))))

;; --- sudo command definitions  --------------------------------
(define-stumpwm-type :password (input prompt)
  (let ((history *input-history*)
        (arg (argument-pop input))
        (fn (symbol-function 'draw-input-bucket)))
    (unless arg
      (unwind-protect
          (setf (symbol-function 'draw-input-bucket)
                (lambda (screen prompt input &optional errorp)
                  (let ((i (copy-structure input)))
                    (setf (input-line-string i)
                          (make-string (length (input-line-string i))
                                       :initial-element #\*))
                    (funcall fn screen prompt i)))
                arg (read-one-line (current-screen) prompt))
        (setf (symbol-function 'draw-input-bucket) fn
              *input-history* history))
      arg)))

(defmacro define-sudo-command (name command &key output)
  (let ((cmd (gensym)))
    `(defcommand ,name (password) ((:password "sudo password: "))
       (let ((,cmd (concat "echo '" password "' | sudo -S " ,command)))
         ,(if output
              `(run-prog-collect-output *shell-program* "-c" ,cmd)
            `(run-prog *shell-program* :args (list "-c" ,cmd) :wait nil))))))

(define-sudo-command eon
  (concat "pon em"
          (when (ps-exists "nm-applet")
            (concat "&& sudo " (kill-ps-command "nm-applet"))))
  :output t)

(define-sudo-command eoff "poff em" :output t)
(define-sudo-command reboot "reboot")
(define-sudo-command shutdown "shutdown -h now")
(define-sudo-command backup "~/src/backup/backup.sh")
(define-sudo-command apache-start "/etc/init.d/apache2 start")
(define-sudo-command apache-stop  "/etc/init.d/apache2 stop")

(defcommand reinit () ()
  "docstring"
  (run-commands "reload" "loadrc"))

;; courtesy of Peter Seibel
(defmacro with-gensyms ((&rest names) &body body)
  `(let ,(loop for n in names collect `(,n (gensym)))
     ,@body))

;; (defmacro program-with-layout (name &key (command (string-downcase (string name)))
;;                                     (props `'(:class ,(string-capitalize command))))
;;   (with-gensyms (s w h files-path layout rules)
;;                 `(defcommand ,name () ()
;;                    (let* ((,s (current-screen))
;;                           (,w (prin1-to-string (screen-width ,s)))
;;                           (,h (prin1-to-string (screen-height ,s)))
;;                           (,files-path "/home/sva/etc/stumpwm_files/")
;;                           (,layout (concat ,files-path ,command "-layout-" ,w "x" ,h))
;;                           (,rules (concat ,files-path ,command "-rules")))
;;                      (gnew ,command)
;;                      (restore-from-file ,layout)
;;                      (restore-window-placement-rules ,rules)
;;                      (run-or-raise ,command ,props)
;;                      (place-existing-windows))))) ; needed if command was already run

;; (program-with-layout gimp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;Key binding;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;Make the bindings more comfortable.
(set-prefix-key (kbd "C-,"))
(define-key *root-map*   (kbd "s")   "colon exec firefox http://")
;; (define-key *root-map*   (kbd "*")   "show-battery")
(define-key *root-map*   (kbd "w")   "windowlist")

(define-key *root-map*   (kbd "c")   "urxvt")
(define-key *root-map*   (kbd "C-c")   "urxvt")

(define-key *root-map*   (kbd "e")   "emacs")
(define-key *root-map*   (kbd "b")   "chromium")
(define-key *root-map*   (kbd "C-b")   "chromium")
(define-key *root-map*   (kbd "C-o") "fnext")
(define-key *root-map*   (kbd "v")   "virtualbox")
(define-key *root-map*   (kbd "P")   "gnome-panel")
(define-key *root-map*   (kbd "m")   "exec xterm -rv -e ncmpcpp")
(define-key *root-map*   (kbd "C-m")   "exec xterm -rv -e ncmpcpp")
(define-key *root-map* (kbd "M") "exec xterm -rv -e alsamixer") ;; mixer
;; (define-key *root-map*   (kbd "N")   '*notifications-map*)
(define-key *root-map*   (kbd "u")   "uptime")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; emacs style setting
(define-key *root-map*   (kbd "0")   "remove")
(define-key *root-map*   (kbd "1")   "only")
(define-key *root-map*   (kbd "2")   "vsplit")
(define-key *root-map*   (kbd "3")   "hsplit")
(define-key *input-map*  (kbd "C-m") 'input-submit)
(define-key *input-map*  (kbd "C-h") 'input-delete-backward-char)
(define-key *input-map*  (kbd "M-p") 'input-history-back)
(define-key *input-map*  (kbd "M-n") 'input-history-forward)
(define-key *input-map*  (kbd "C-i") 'input-complete-forward)
(define-key *resize-map* (kbd "C-m") "exit-iresize")
(define-key *root-map* (kbd ")") '*mpd-map*)

;;*** 11.2 (info "(stumpwm)Debugging StumpWM")

;;Stumpwm crashes or freezes too much. If we set the debug up to ludicoursly high levels, maybe we'll learn something.
(setf stumpwm::*debug-level* 10)
(redirect-all-output (data-dir-file "debug-output" "txt"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;Startup programs;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What programs do we run on startup?
(run-shell-command "xsetroot -solid black")
;; (nm-applet)
(start-uniq-command-ps "gnome-settings-daemon")
(start-uniq-command-ps "gnome-power-manager")
(start-uniq-command-ps "gnome-valume-manager")
;; ;; (start-uniq-command-ps "update-notifier")
;; ;; (run-shell-command "~/src/backup/alert.sh")
;; ;; (emacs)
;; (run-shell-command "(ps -ef | grep urxvt) || urxvt")
;; ;; (ncmpcpp)
;; ;; (chromium-browser)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;Groups;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   ____
;;  / ___|_ __  ___  _   _ _ __   ___
;; | |  _| '__|/ _ \| | | | '_ \ / __|
;; | |_| | |  | (_) | |_| | |_) |\__ \
;;  \____|_|   \___/ \__,_| .__/ |___/
;;                        |_|
;;;Change various group things.
;; あらかじめグループを作成しておく
;; Groups

;; (run-commands
;;  "grename main"
;;  "gnewbg other"
;;  "gnewbg scratchpad"
;;  "gselect main"
;;  "exec emacs24"
;;  "hsplit"
;;  "exec chromium-browser"
;;  "fnext"
;;  "vsplit")





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BackGround Image
;; (run-shell-command "which xsetbg && xsetbg -fullscreen /home/junichiro/data/backgrounds/brueghel_fight00.jpg")
;; (run-shell-command (concatenate 'string "display -window root " "/home/junichiro/data/backgrounds/brueghel_fight00.jpg"))

;; (run-shell-command (concatenate 'string "display -window root " "~/data/backgrounds/fujin.raijin.jpg"))
(run-shell-command (concatenate 'string "fbsetbg " "~/data/backgrounds/fujin.raijin.jpg"))
;; (run-shell-command (concatenate 'string "display -window root " "~/data/backgrounds/fujin.raijin.jpg"))

;; (defun gselectw (num img) ()
;;        (progn (if img (run-shell-command (concatenate 'string "fbsetbg -t '" img "'"))
;;                   (run-shell-command "fbsetbg -t '/home/junichiro/data/backgrounds/fujin.raijin.jpg'"))
;;               (run-commands (concatenate 'string "gselect " num))))

;; (defcommand gselect1 () () (gselectw "1" "/path/to/dir/01.jpg"))
;; (defcommand gselect2 () () (gselectw "2" nli))

;; (define-key *root-map* (kbd "1") "gselect1")
;; (define-key *root-map* (kbd "2") "gselect2")

;; (set-font "-mplus-m+gothic-bold-r-normal--12-120-75-75-c-120-iso10646-1")

; --- mode line -------------------------------------------------
(setf *mode-line-screen-position* :top)
(setf *mode-line-frame-position* :top)
(setf *mode-line-border-width* 1)
(setf *mode-line-pad-x* 6)
(setf *mode-line-pad-y* 0)
(setf *mode-line-background-color* "black")
(setf *mode-line-foreground-color* "wheat")
(setf *mode-line-border-color* "dark grey")
(setf *screen-mode-line-format*
      (list "^03%N^n "
            '(:eval (run-shell-command
                     "LANG=c; date '+%m/%d(%a)_%H:%M'|tr -d [:cntrl:]" t))
            " | %b | %g"))

(when (and *startup-mode-line*
           (not (head-mode-line (current-head))))
  (mode-line))
